import { Button, LineEdit, ScrollView, Switch } from "std-widgets.slint";

// Reusable StyledButton with configurable properties
component StyledButton inherits Button {
    in property <string> button-text: "Button";
    height: 40px;
    text: button-text;
}

// Reusable StyledButton1 with configurable properties
component StyledButton1 inherits Rectangle {
    in-out property <string> text;
    callback clicked;
    border-radius: self.height / 2;
    border-width: 1px;
    border-color: self.background.darker(25%);
    background: touch.pressed ? #6b828200 : touch.has-hover ? #6c616c00 : #0c86ff00;
    height: txt.preferred-height * 2;
    width: 300px;

    txt := Text {
        x: (parent.width - self.width) / 2 + (touch.pressed ? 2px : 0);
        y: (parent.height - self.height) / 2 + (touch.pressed ? 1px : 0);
        color: touch.pressed ? #ffffff : #eeeeee;
        font-size: 16px;
        text: root.text;
    }
    touch := TouchArea { clicked => { root.clicked(); } }
}

// PasswordEntry Struct
export struct PasswordEntry {
    id: int,
    website: string,
    username_email: string,
    password: string,
}

// LoginWindow Component
export component LoginWindow inherits Window {
    title: "EzPass";
    icon: @image-url("icon/icon.png");
    min-width: 600px;
    min-height: 500px;
    in-out property <string> username;
    in-out property <string> password;
    in-out property <string> message;
    callback login-clicked();
    callback register-clicked();
    callback forgot_password();
    callback importeddb();
    in-out property <bool> is_visible: true;
    in-out property <string> database_name;

    Rectangle {
        background: black;
        VerticalLayout {
            padding: 20px;
            spacing: 15px;

            HorizontalLayout {
                alignment: center;
                Image { source: @image-url("icon/icon.png"); width: 80px; height: 80px; }
                Text { text: "EZPass"; font-size: 40px; }
            }

            LineEdit { placeholder-text: "User"; text <=> root.username; font-size: 16px; height: 40px; }
            LineEdit { 
                placeholder-text: "Palavra-Passe"; 
                text <=> root.password; 
                font-size: 16px; 
                height: 40px; 
                input-type: InputType.password; 
            }
            StyledButton { button-text: "Login"; clicked => { root.login-clicked(); } }
            StyledButton { button-text: "Registro"; clicked => { root.register-clicked(); } }
            Text { 
                text: root.message; 
                font-size: 16px; 
                color: #dc3545; 
                horizontal-alignment: center; 
                wrap: word-wrap; 
            }
            HorizontalLayout {
                alignment: center;
                StyledButton1 { 
                    text: "Esqueceu-se da password?"; 
                    clicked => { root.forgot_password(); } 
                }
            }
            HorizontalLayout {
                alignment: center;
                padding-bottom: 10px;
                StyledButton1 { text: "Importar DB"; clicked => { root.importeddb(); } }
            }
        }
    }
}

// Optimized PasswordCard
component PasswordCard inherits Rectangle {
    in-out property <int> id: 1;
    in property <string> website;
    in property <string> username_email;
    in property <string> password;
    callback edit-clicked(int);
    callback delete-clicked(int);

    background: #3a3a3a;
    border-radius: 8px;
    width: 100%;
    height: 200px;

    VerticalLayout {
        padding: 10px;
        spacing: 5px;

        Text { text: root.website; color: white; font-size: 15px; wrap: word-wrap; }
        Text { text: root.username_email; color: #cccccc; font-size: 15px; wrap: word-wrap; }
        LineEdit { 
            text: root.password; 
            font-size: 15px; 
            height: 40px; 
            padding: 5px; 
            input-type: InputType.password; 
            read-only: true; 
        }
        HorizontalLayout {
            alignment: end;
            spacing: 5px;

            for icon[idx] in ["✎", "🗑"] : TouchArea {
                width: 24px;
                height: 24px;
                clicked => { idx == 0 ? root.edit-clicked(root.id) : root.delete-clicked(root.id); }
                mouse-cursor: pointer;
                Rectangle {
                    background: #555555;
                    border-radius: 4px;
                    Text { text: icon; color: white; font-size: 14px; horizontal-alignment: center; vertical-alignment: center; }
                }
            }
        }
    }
}

// BlackSquareWindow Component
export component BlackSquareWindow inherits Window {
    title: "EZPass";
    icon: @image-url("icon/icon.png");
    min-width: 800px;
    min-height: 700px;
    preferred-width: 800px;
    preferred-height: 700px;
    in-out property <[PasswordEntry]> password_entries;
    in-out property <bool> panelVisible: false;
    in-out property <string> selected_website;
    in-out property <string> selected_username_email;
    in-out property <string> selected_password;
    private property <bool> passwordVisible: false;
    in-out property <bool> isAddMode: false;
    in-out property <int> id;
    callback refresh_passwords();
    callback add_password();
    callback save_password();
    in-out property <string> message;
    callback edit(int, string, string, string);
    callback deletePassword(int);
    in-out property <bool> autostart_enabled;
    callback toggle_autostart(bool);
    callback logout();
    callback export();
    in-out property <bool> websocket_enabled;
    callback websocket(bool);

    Rectangle {
        background: black;
        width: 100%;
        height: 100%;

        HorizontalLayout {
            padding: 10px;
            spacing: 10px;

            Rectangle {
                width: 40%;
                clip: true;
                VerticalLayout {
                    header := HorizontalLayout {
                        height: 40px;
                        padding-left: 10px;
                        padding-right: 10px;
                        Text { text: "Passwords"; color: white; font-size: 18px; }
                        TouchArea {
                            width: 30px;
                            height: 30px;
                            mouse-cursor: pointer;
                            clicked => {
                                root.isAddMode = true;
                                root.panelVisible = true;
                                root.selected_website = "";
                                root.selected_username_email = "";
                                root.selected_password = "";
                            }
                            Rectangle {
                                background: #555555;
                                border-radius: 4px;
                                Text { text: "+"; color: white; font-size: 20px; horizontal-alignment: center; vertical-alignment: center; }
                            }
                        }
                    }
                    ScrollView {
                        height: parent.height - header.height;
                        width: 100%;
                        VerticalLayout {
                            padding: 5px;
                            spacing: 10px;
                            width: parent.width - 20px;
                            for entry in root.password_entries: PasswordCard {
                                id: entry.id;
                                website: entry.website;
                                username_email: entry.username_email;
                                password: entry.password;
                                edit-clicked(id) => {
                                    root.isAddMode = false;
                                    root.selected_website = entry.website;
                                    root.id = id;
                                    root.selected_username_email = entry.username_email;
                                    root.selected_password = entry.password;
                                    root.panelVisible = true;
                                }
                                delete-clicked(id) => { root.deletePassword(id); }
                            }
                        }
                    }
                }
            }

            Rectangle {
                visible: root.panelVisible;
                background: #000000;
                border-radius: 8px;
                padding: 20px;
                VerticalLayout {
                    spacing: 20px;
                    HorizontalLayout {
                        height: 40px;
                        Text { text: root.isAddMode ? "Add Password" : "Edit Password"; font-size: 18px; color: white; }
                    }
                    LineEdit { placeholder-text: "Website"; text <=> root.selected_website; font-size: 16px; height: 40px; }
                    LineEdit { placeholder-text: "User/E-mail"; text <=> root.selected_username_email; font-size: 16px; height: 40px; }
                    HorizontalLayout {
                        spacing: 8px;
                        LineEdit { 
                            placeholder-text: "Password"; 
                            text <=> root.selected_password; 
                            font-size: 16px; 
                            height: 40px; 
                            input-type: root.passwordVisible ? InputType.text : InputType.password; 
                        }
                        Rectangle {
                            width: 40px;
                            height: 40px;
                            TouchArea {
                                clicked => { root.passwordVisible = !root.passwordVisible; }
                                mouse-cursor: pointer;
                                Text { 
                                    text: "👁"; 
                                    font-size: 24px; 
                                    color: root.passwordVisible ? #007AFF : #8E8E93; 
                                    horizontal-alignment: center; 
                                    vertical-alignment: center; 
                                }
                            }
                        }
                    }
                    HorizontalLayout {
                        spacing: 10px;
                        StyledButton { 
                            button-text: "Save"; 
                            clicked => { 
                                if (root.selected_website != "" && root.selected_username_email != "" && root.selected_password != "") {
                                    root.save_password();
                                } else {
                                    root.message = "❌ Please fill in all fields.";
                                }
                            }
                        }
                        StyledButton { 
                            button-text: "Cancel"; 
                            clicked => { 
                                root.panelVisible = false; 
                                root.selected_website = ""; 
                                root.selected_username_email = ""; 
                                root.selected_password = ""; 
                            }
                        }
                    }
                    Text { text: root.message; font-size: 24px; color: white; horizontal-alignment: center; wrap: word-wrap; }
                }
            }
        }

        Button { text: "Export"; x: parent.width - self.width - 20px; y: parent.height - self.height - 130px; clicked => { root.export(); } }
        Button { text: "Logout"; x: parent.width - self.width - 20px; y: parent.height - self.height - 90px; clicked => { root.logout(); } }
        Switch { 
            x: parent.width - self.width - 20px; 
            y: parent.height - self.height - 60px; 
            text: "Inicio automático"; 
            checked <=> root.autostart_enabled; 
            toggled => { root.toggle_autostart(root.autostart_enabled); } 
        }
        Switch { 
            x: parent.width - self.width - 20px; 
            y: parent.height - self.height - 30px; 
            text: "Suporte Extensão"; 
            checked <=> root.websocket_enabled; 
            toggled => { root.websocket(root.websocket_enabled); } 
        }
    }
}
